{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAO,CACXC,OAAQC,SAASC,cAAc,SAC/BC,aAAcF,SAASC,cAAc,uBACrCE,YAAaH,SAASC,cAAc,sBACpCG,cAAeJ,SAASC,cAAc,yBAgCxC,SAASI,EAAcC,EAAUC,GAC/B,IAAMC,EAAgBC,KAAKC,SAAW,GACtC,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACLN,EACFI,EAAQ,CAAEN,WAAUC,UAEpBM,EAAO,CAAEP,WAAUC,YAEpBA,MAtCPQ,QAAQC,IAAIlB,EAAKC,QACjBgB,QAAQC,IAAIlB,EAAKI,cACjBa,QAAQC,IAAIlB,EAAKK,aACjBY,QAAQC,IAAIlB,EAAKM,eAEjBN,EAAKC,OAAOkB,iBAAiB,UAE7B,SAAsBC,GACpBA,EAAIC,iBAKJ,IAJA,IAAIC,EAAQC,OAAOvB,EAAKI,aAAaoB,OAC/BC,EAAOF,OAAOvB,EAAKK,YAAYmB,OAC/BE,EAASH,OAAOvB,EAAKK,YAAYmB,OAE9BG,EAAW,EAAGA,GAAYD,EAAQC,IACzCpB,EAAcoB,EAAUL,GACrBM,MAAK,SAAAC,G,IAAGrB,EAAQqB,EAARrB,SAAUC,EAAKoB,EAALpB,MACjBqB,EAAAhC,GAASiC,OAAOC,QACd,uBAAwCC,OAAfzB,EAAS,QAAYyB,OAANxB,EAAM,UAGjDyB,OAAM,SAAAL,G,IAAGrB,EAAQqB,EAARrB,SAAUC,EAAKoB,EAALpB,MAClBqB,EAAAhC,GAASiC,OAAOI,QACd,sBAAqCF,OAAfzB,EAAS,QAAYyB,OAANxB,EAAM,UAGjDa,GAASG,K","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst refs = {\n  formEl: document.querySelector('.form'),\n  delayInputEl: document.querySelector('input[name=\"delay\"]'),\n  stepInputEl: document.querySelector('input[name=\"step\"]'),\n  amountInputEl: document.querySelector('input[name=\"amount\"]'),\n};\n\nconsole.log(refs.formEl);\nconsole.log(refs.delayInputEl);\nconsole.log(refs.stepInputEl);\nconsole.log(refs.amountInputEl);\n\nrefs.formEl.addEventListener('submit', onFormSubmit);\n\nfunction onFormSubmit(evt) {\n  evt.preventDefault();\n  let delay = Number(refs.delayInputEl.value);\n  const step = Number(refs.stepInputEl.value);\n  const amount = Number(refs.stepInputEl.value);\n\n  for (let position = 1; position <= amount; position++) {\n    createPromise(position, delay)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n      });\n    delay += step;\n  }\n}\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$iU1Pc","parcelRequire","$ce04d3a99e08e73b$var$refs","formEl","document","querySelector","delayInputEl","stepInputEl","amountInputEl","$ce04d3a99e08e73b$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","console","log","addEventListener","evt","preventDefault","delay1","Number","value","step","amount","position1","then","param","$parcel$interopDefault","Notify","success","concat","catch","failure"],"version":3,"file":"03-promises.99795c6b.js.map"}